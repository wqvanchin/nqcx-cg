#set($layout='_layout/empty.vm')
<form id="generate_form" method="post" action="">
	<table border="1">
		<thead>
			<tr>
				<th>field</th>
				<th>type</th>
				<th>collation</th>
				<th>isNull</th>
				<th>key</th>
				<th>defaultValue</th>
				<th>extra</th>
				<th>privileges</th>
				<th>comment</th>
			</tr>
		</thead>
		<tbody id="tableInfo">
			#foreach($c in $!{table.columns})
			<tr>
				<td>$!{c.field}</td>
				<td>$!{c.type}</td>
				<td>$!{c.collation}</td>
				<td>$!{c.isNull}</td>
				<td>$!{c.key}</td>
				<td>$!{c.defaultValue}</td>
				<td>$!{c.extra}</td>
				<td>$!{c.privileges}</td>
				<td>$!{c.comment}</td>
			</tr>
			#end
		</tbody>
	</table>
	<br />
	<fieldset>
		<input id="reloadAll" type="button" value="Reload all" /> <input
			id="entityConfig" type="button" value="Add entity" data-value='0' />
		<input id="mapperConfig" type="button" value="Add mapper"
			data-value='0' />
		<!--  	<input id="managerConfig" type="button" value="Add manager" data-value='0' /> -->
		<input id="serviceConfig" type="button" value="Add service"
			data-value='0' />
	</fieldset>
	<br />
	<fieldset>
		<legend>
			<span style="font-weight: 700;">Package name & Package: </span>
		</legend>
		<table border="0">
			<tr id="entityProjectTr" style="display: none;">
				<td align="right"><span style="font-weight: 700;">Entity
						project name: </span></td>
				<td><input type="text" name="entityProjectName" class="big_200"
					value=""></td>
				<td align="right"><span style="font-weight: 700;">Entity
						project package: </span></td>
				<td><input type="text" name="entityProjectPackage"
					class="big_200" value=""></td>
			</tr>
			<tr id="mapperProjectTr" style="display: none;">
				<td align="right"><span style="font-weight: 700;">Mapper
						project name: </span></td>
				<td><input type="text" name="mapperProjectName" class="big_200"
					value=""></td>
				<td align="right"><span style="font-weight: 700;">Mapper
						project package: </span></td>
				<td><input type="text" name="mapperProjectPackage"
					class="big_200" value=""></td>
			</tr>
			<!--             <tr id="managerProjectTr" style="display:none;"> -->
			<!--                 <td align="right"><span style="font-weight:700;">Manager project name: </span></td> -->
			<!--                 <td><input type="text" name="managerProjectName" class="big_200" value=""></td> -->
			<!--                 <td align="right"><span style="font-weight:700;">Manager project package: </span></td> -->
			<!--                 <td><input type="text" name="managerProjectPackage" class="big_200" value=""></td> -->
			<!--			</tr> -->
			<tr id="serviceProjectTr" style="display: none;">
				<td align="right"><span style="font-weight: 700;">Service
						project name: </span></td>
				<td><input type="text" name="serviceProjectName"
					class="big_200" value=""></td>
				<td align="right"><span style="font-weight: 700;">Service
						project package: </span></td>
				<td><input type="text" name="serviceProjectPackage"
					class="big_200" value=""></td>
			</tr>
		</table>
	</fieldset>
	<br />
	<fieldset>
		<legend>
			<span style="font-weight: 700;">Entity: </span>
		</legend>
		<div id="config_entity_div"></div>
	</fieldset>
	<br /> <br />
	<fieldset>
		<legend>
			<span style="font-weight: 700;">Mapper: </span>
		</legend>
		<div id="config_mapper_div"></div>
	</fieldset>
	<br /> <br />
	<!--	<fieldset> -->
	<!-- 	<legend><span style="font-weight:700;">Manager: </span></legend> -->
	<!--         <div id="config_manager_div"> -->
	<!--         </div> -->
	<!-- 	</fieldset> -->
	<!--     <br /> -->
	<!--     <br /> -->
	<fieldset>
		<legend>
			<span style="font-weight: 700;">Service: </span>
		</legend>
		<div id="config_service_div"></div>
	</fieldset>
	<br /> <input id="generate_btn" type="button" value="Generate Code"
		style="width: 150px; height: 32px; background-color: orange;" />
</form>
<script type="text/javascript">
	var button = {
		reloadAll: function() {
			return jQuery('#reloadAll');
		},
		entityConfig: function() {
			return jQuery('#entityConfig');
		},
		entityConfigValueAlternation: function() {
			if(!this.checkProjectName())
				return;
			if(!this.entityConfig().attr('data-value') || this.entityConfig().attr('data-value') == 0) {
				this.entityConfig().attr('data-value','1');
				this.entityConfig().val('Cancel entity');
				this.entityConfig().css('background-color','orange');
				entity.projectFill();
			} else {
				this.entityConfig().attr('data-value','0');
				this.entityConfig().val('Add entity');
				this.entityConfig().css('background-color','');
				entity.projectClear();
			}
		},
		mapperConfig: function() {
			return jQuery('#mapperConfig');
		},
		mapperConfigValueAlternation: function() {
			if(!this.checkProjectName())
				return;
			if(!this.mapperConfig().attr('data-value') || this.mapperConfig().attr('data-value') == 0) {
				this.mapperConfig().attr('data-value','1');
				this.mapperConfig().val('Cancel mapper');
				this.mapperConfig().css('background-color','orange');
				mapper.projectFill();
			} else {
				this.mapperConfig().attr('data-value','0');
				this.mapperConfig().val('Add mapper');
				this.mapperConfig().css('background-color','');
				mapper.projectClear();
		}
		},
//		managerConfig: function() {
//			return jQuery('#managerConfig');
//		},
//		managerConfigValueAlternation: function() {
//			if(!this.checkProjectName())
//				return;
//			if(!this.managerConfig().attr('data-value') || this.managerConfig().attr('data-value') == 0) {
//				this.managerConfig().attr('data-value','1');
//				this.managerConfig().val('Cancel manager');
//				this.managerConfig().css('background-color','orange');
//				manager.projectFill();
//			} else {
//				this.managerConfig().attr('data-value','0');
//				this.managerConfig().val('Add manager');
//				this.managerConfig().css('background-color','');
//				manager.projectClear();
//			}
//		},
		serviceConfig: function() {
			return jQuery('#serviceConfig');
		},
		serviceConfigValueAlternation: function() {
			if(!this.checkProjectName())
				return;
			if(!this.serviceConfig().attr('data-value') || this.serviceConfig().attr('data-value') == 0) {
				this.serviceConfig().attr('data-value','1');
				this.serviceConfig().val('Cancel service');
				this.serviceConfig().css('background-color','orange');
				service.projectFill();
			} else {
				this.serviceConfig().attr('data-value','0');
				this.serviceConfig().val('Add service');
				this.serviceConfig().css('background-color','');
				service.projectClear();
			}
		},
		checkProjectName: function() {
			if(project.pName().val()){
				return true;
			} else {
				jQuery.messager.show({
					title: 'Error',
					msg: 'Please select project.'
				});
				return false;
			}
		}
	};

	project.childChange = function() {
		if(button.entityConfig().attr('data-value') == 1)
			entity.projectFill();
		if(button.mapperConfig().attr('data-value') == 1)
			mapper.projectFill();
//		if(button.managerConfig().attr('data-value') == 1)
//			manager.projectFill();
		if(button.serviceConfig().attr('data-value') == 1)
			service.projectFill();
	};
	
	var tableInfo = {
		info: function() {
			return jQuery('tbody#tableInfo');
		},
	emptyInfo: function() {
		this.info().html('');
	},
		addInfo: function(column) {
			if(!column)
				return;
			var colstr = '<tr>';
		colstr += '<td>'+column.field+'</td>';
		colstr += '<td>'+column.type+'</td>';
		colstr += '<td>'+column.collation+'</td>';
		colstr += '<td>'+column.isNull+'</td>';
		colstr += '<td>'+column.key+'</td>';
		colstr += '<td>'+column.defaultValue+'</td>';
		colstr += '<td>'+column.extra+'</td>';
		colstr += '<td>'+column.privileges+'</td>';
		colstr += '<td>'+column.comment+'</td>';
			colstr += '</tr>';
			this.info().append(colstr);
		},
	getInfo: function(tableName) {
			if(!tableName)
				return;
		nqcxGet('#springUrl('/table/get/')'+tableName,{},function(result) {
			tableInfo.emptyInfo();
			if(result.object && result.object.columns) {
				for(idx in result.object.columns) {
						tableInfo.addInfo(result.object.columns[idx]);
				}
			}
		});
		}
	};
</script>
<script type="text/javascript">
	$(document).ready(function(){
	button.reloadAll().click(function() {
		table.change();
	});
		button.entityConfig().click(function() {
			button.entityConfigValueAlternation();
		});
		button.mapperConfig().click(function() {
			button.mapperConfigValueAlternation();
		});
//		button.managerConfig().click(function() {
//			button.managerConfigValueAlternation();
//		});
		button.serviceConfig().click(function() {
			button.serviceConfigValueAlternation();
		});
		tableInfo.getInfo(table.tableName().val());
	});
</script>
<script type="text/javascript">
	var entity = {
		projectTr: function() {
			return jQuery('#entityProjectTr');
		},
		projectDiv: function() {
			return jQuery('#config_entity_div');
		},
		projectName: function() {
			return jQuery('input[name="entityProjectName"]');
		},
		projectPackage: function() {
			return jQuery('input[name="entityProjectPackage"]');
		},
		projectFill: function() {
			var pNameValue = project.pName().val();
			var pTypeValue = project.pType().filter(':checked').val();
		var pPackageValue = project.pPackage().val();
			
			var tableName = table.tableName().val();
			var columns = [];
			if(!tableName)
				return;

			this.projectName().val(pTypeValue == 0 ? '' : pNameValue + '-entity');
			this.projectPackage().val(pPackageValue + '.entity.' + tableName);
			this.projectTr().css('display','');

		nqcxGet('#springUrl('/table/get/')'+tableName,{},function(result) {
			if(result.object && result.object.columns) {
					columns = result.object.columns;
			}
			entity.config(columns,tableName);
		});
			
		},
		projectClear: function() {
			this.projectName().val('');
			this.projectPackage().val('');
			this.projectTr().css('display','none');
			this.projectDiv().html('');
		},
		config: function(columns,table) {
			var entityHtml = '<table border="0" cellpadding="0" cellspacing="0">';
			entityHtml += '<tr>' + this.row(table) + '</tr>';
			entityHtml += '</table>';
			entityHtml += '<hr />';
			entityHtml += '<table border="0" cellpadding="0" cellspacing="0">';
		for(idx in columns) {
				entityHtml += '<tr>' + this.row1(columns[idx]) + '</tr>';
		}
			entityHtml += '</table>';
		this.projectDiv().html(entityHtml);
		},
		row: function(table) {
			var rowHtml = '';
			
			var entityName = table.replaceFirstUP();
			var entityBase = "EntityBO";
			var show = 'public class ' + entityName + ' extends ' + entityBase;
			
			rowHtml += '<td>' + table + '</td>';
			rowHtml += '<td><input id="entityName_'+ table +'" type="text" name="entityName" class="big_200" value="'+ entityName +'" onkeyup="entity.show(\''+ table +'\')" onafterpaste="entity.show(\''+ table +'\')" onblur="entity.show(\''+ table +'\')" /></td>';
			rowHtml += '<td><span id="entityText_'+ table +'">'+ show +'</span></td>';
			return rowHtml;
		},
		row1: function(column) {
			var rowHtml = '';
			var field = column.field;
			var type = column.type;
			var field_ = this.toField(field);
			var type_ = this.toType(type);
			var show = 'private ' + type_ + ' ' + field_ + ";";
			
			rowHtml += '<td><input id="tableColumns_'+ field +'" type="text" name="tableColumns" class="big_200" value="'+ field +'" readonly="true" /></td>';
			rowHtml += '<td>' + type + '</td>';
			rowHtml += '<td><input id="entityField_'+ field +'" type="text" name="entityField" class="big_200" value="'+ field_ +'" onkeyup="entity.show1(\''+ field +'\')" onafterpaste="entity.show1(\''+ field +'\')" onblur="entity.show1(\''+ field +'\')" /></td>';
			rowHtml += '<td><input id="entityType_'+ field +'" type="text" name="entityType" class="big_200" value="'+ type_ +'" onkeyup="entity.show1(\''+ field +'\')" onafterpaste="entity.show1(\''+ field +'\')" onblur="entity.show1(\''+ field +'\')" /></td>';
			rowHtml += '<td><span id="entityText_'+ field +'">'+ show +'</span></td>';
			return rowHtml;
		},
		show: function(table){
			var entityName = document.getElementById('entityName_'+table).value;
			var entityBase = "EntityBO";
			var show = 'public class ' + entityName + ' extends ' + entityBase;
			jQuery('#entityText_'+table).html(show);
		},
		show1: function(suffix){
			var field_ = document.getElementById('entityField_'+suffix).value;
			var type_ = document.getElementById('entityType_'+suffix).value;
			var show1 = 'private ' + type_ + ' ' + field_ + ";";
			jQuery('#entityText_'+suffix).html(show1);
		},
		toField: function(input) {
			if(input.indexOf('_') != -1)
				return input.substring(input.indexOf('_') + 1).replaceFirstUP().replaceFirstLow();
			return input.replaceFirstUP();
			// return input.replaceFirstUP().replaceFirstLow();
		},
		toType: function(input) {
			if(input.startWith('bigint'))
				return "long";
			else if(input.startWith('int'))
				return "int";
			else if(input.startWith('tinyint'))
				return "int";
			else if(input.startWith('float'))
				return "float";
			else if(input.startWith('decimal'))
				return "BigDecimal";
			else if(input.startWith('varchar') || input.startWith('text'))
				return "String";
			else if(input.startWith('datetime') || input.startWith('date') || input.startWith('timestamp'))
				return "Date";
			else
				return input;
		}
	};
	
	var mapper = {
		projectTr: function() {
			return jQuery('#mapperProjectTr');
		},
		projectDiv: function() {
			return jQuery('#config_mapper_div');
		},
		projectName: function() {
			return jQuery('input[name="mapperProjectName"]');
		},
		projectPackage: function() {
			return jQuery('input[name="mapperProjectPackage"]');
		},
		projectFill: function() {
			var pNameValue = project.pName().val();
			var pTypeValue = project.pType().filter(':checked').val();
			var pPackageValue = project.pPackage().val();
			
			var tableName = table.tableName().val();
			if(!tableName)
				return;

			this.projectName().val(pTypeValue == 0 ? '' : pNameValue + '-dao');
			this.projectPackage().val(pPackageValue + '.mapper.' + tableName);
			this.projectTr().css('display','');

			this.config(tableName);
		},
		projectClear: function() {
			this.projectName().val('');
			this.projectPackage().val('');
			this.projectTr().css('display','none');
			this.projectDiv().html('');
		},
		config: function(table) {
			var mapperHtml = '<table border="0" cellpadding="0" cellspacing="0">';
			mapperHtml += '<tr>' + this.row(table) + '</tr>';
			mapperHtml += '</table>';
		jQuery('#config_mapper_div').html(mapperHtml);
		},
		row: function(table) {
			var rowHtml = '';
			
			var interface = table.replaceFirstUP() + 'Mapper';
			var extendsInterface = "MapperInterface";
			var show = 'public interface ' + interface + ' extends ' + extendsInterface;
			
			rowHtml += '<td>' + table + '</td>';
			rowHtml += '<td><input id="mapperInterface_'+ table +'" type="text" name="mapperInterface" class="big_200" value="'+ interface +'" onkeyup="mapper.show(\''+ table +'\')" onafterpaste="mapper.show(\''+ table +'\')" onblur="mapper.show(\''+ table +'\')" /></td>';
			rowHtml += '<td><span id="mapperText_'+ table +'">'+ show +'</span></td>';
			return rowHtml;
		},
		show: function(table) {
			var interface = document.getElementById('mapperInterface_'+table).value;
			var extendsInterface = "MapperInterface";
			var show = 'public interface ' + interface + ' extends ' + extendsInterface;
			jQuery('#mapperText_'+table).html(show);
		}
	};

//	var manager = {
//		projectTr: function() {
//			return jQuery('#managerProjectTr');
//		},
//		projectDiv: function() {
//			return jQuery('#config_manager_div');
//		},
//		projectName: function() {
//			return jQuery('input[name="managerProjectName"]');
//		},
//		projectPackage: function() {
//			return jQuery('input[name="managerProjectPackage"]');
//		},
//		projectFill: function() {
//			var pNameValue = project.pName().val();
//			var pTypeValue = project.pType().filter(':checked').val();
// 		var pPackageValue = project.pPackage().val();
			
//			this.projectName().val(pTypeValue == 0 ? '' : pNameValue + '-manager');
//			this.projectPackage().val(pPackageValue + '.manager');
//			this.projectTr().css('display','');

//			var tableName = table.tableName().val();
//			if(!tableName)
//				return;
//			this.config(tableName);
//		},
//		projectClear: function() {
//			this.projectName().val('');
//			this.projectPackage().val('');
//			this.projectTr().css('display','none');
//			this.projectDiv().html('');
//		},
//		config: function(table) {
//			var managerHtml = '<table border="0" cellpadding="0" cellspacing="0">';
//			managerHtml += '<tr>' + manager.row(table) + '</tr>';
//			managerHtml += '<tr>' + manager.row1(table) + '</tr>';
//			managerHtml += '</table>';
// 		jQuery('#config_manager_div').html(managerHtml);
//		},
//		row: function(table) {
//			var rowHtml = '';
			
//			var interface = table.replaceFirstUP() + 'Manager';
//			var extendsInterface = "ManagerInterface";
//			var show = 'public interface ' + interface + ' extends ' + extendsInterface;
			
//			rowHtml += '<td>' + table + '</td>';
//			rowHtml += '<td><input id="managerInterface_'+ table +'" type="text" name="managerInterface" value="'+ interface +'" class="big_200" onkeyup="manager.show(\''+ table +'\')" onafterpaste="manager.show(\''+ table +'\')" onblur="manager.show(\''+ table +'\')" /></td>';
//			rowHtml += '<td><span id="managerText_'+ table +'">'+ show +'</span></td>';
//			return rowHtml;
//		},
//		row1: function(table) {
//			var rowHtml = '';
			
//			var implement = table.replaceFirstUP() + 'ManagerImpl';
//			var interface = table.replaceFirstUP() + 'Manager';
//			var extendsSupport = "ManagerSupport";
//			var show = 'public class ' + implement + ' extends ' + extendsSupport + ' implements ' + interface;
			
//			rowHtml += '<td>' + table + '</td>';
//			rowHtml += '<td><input id="managerImplement_'+ table +'" type="text" name="managerImplement" value="'+ implement +'" class="big_200" onkeyup="manager.show1(\''+ table +'\')" onafterpaste="manager.show1(\''+ table +'\')" onblur="manager.show1(\''+ table +'\')" /></td>';
//			rowHtml += '<td><span id="managerText1_'+ table +'">'+ show +'</span></td>';
//			return rowHtml;
//		},
//		show: function(table) {
//			var interface = document.getElementById('managerInterface_'+table).value;
//			var extendsInterface = "ManagerInterface";
//			var show = 'public interface ' + interface + ' extends ' + extendsInterface;
//			jQuery('#managerText_'+table).html(show);
			
//			this.show1(table)
//		},
//		show1: function(table) {
//			var implement = document.getElementById('managerImplement_'+table).value;
//			var interface = document.getElementById('managerInterface_'+table).value;
//			var extendsSupport = "ManagerSupport";
//			var extendsInterface = "ManagerInterface";
//			var show = 'public class ' + implement + ' extends ' + extendsSupport + ' implements ' + interface;
//			jQuery('#managerText1_'+table).html(show);
//		}
//	};

	var service = {
		projectTr: function() {
			return jQuery('#serviceProjectTr');
		},
		projectDiv: function() {
			return jQuery('#config_service_div');
		},
		projectName: function() {
			return jQuery('input[name="serviceProjectName"]');
		},
		projectPackage: function() {
			return jQuery('input[name="serviceProjectPackage"]');
		},
		projectFill: function() {
			var pNameValue = project.pName().val();
			var pTypeValue = project.pType().filter(':checked').val();
		var pPackageValue = project.pPackage().val();
			
			var tableName = table.tableName().val();
			if(!tableName)
				return;

			this.projectName().val(pTypeValue == 0 ? '' : pNameValue + '-service');
			this.projectPackage().val(pPackageValue + '.service.' + tableName);
			this.projectTr().css('display','');

			this.config(tableName);
		},
		projectClear: function() {
			this.projectName().val('');
			this.projectPackage().val('');
			this.projectTr().css('display','none');
			this.projectDiv().html('');
		},
		config: function(table) {
			var serviceHtml = '<table border="0" cellpadding="0" cellspacing="0">';
			serviceHtml += '<tr>' + service.row(table) + '</tr>';
			serviceHtml += '<tr>' + service.row1(table) + '</tr>';
			serviceHtml += '</table>';
		jQuery('#config_service_div').html(serviceHtml);
		},
		row: function(table) {
			var rowHtml = '';
			
			var interface = table.replaceFirstUP() + 'Service';
			var extendsInterface = "ServiceInterface";
			var show = 'public interface ' + interface + ' extends ' + extendsInterface;
			
			rowHtml += '<td>' + table + '</td>';
			rowHtml += '<td><input id="serviceInterface_'+ table +'" type="text" name="serviceInterface" value="'+ interface +'" class="big_200" onkeyup="service.show(\''+ table +'\')" onafterpaste="service.show(\''+ table +'\')" onblur="service.show(\''+ table +'\')" /></td>';
			rowHtml += '<td><span id="serviceText_'+ table +'">'+ show +'</span></td>';
			return rowHtml;
		},
		row1: function(table) {
			var rowHtml = '';
			
			var implement = table.replaceFirstUP() + 'ServiceImpl';
			var interface = table.replaceFirstUP() + 'Service';
			var extendsSupport = "ServiceSupport";
			var show = 'public class ' + implement + ' extends ' + extendsSupport + ' implements ' + interface;
			
			rowHtml += '<td>' + table + '</td>';
			rowHtml += '<td><input id="serviceImplement_'+ table +'" type="text" name="serviceImplement" value="'+ implement +'" class="big_200" onkeyup="service.show1(\''+ table +'\')" onafterpaste="service.show1(\''+ table +'\')" onblur="service.show1(\''+ table +'\')" /></td>';
			rowHtml += '<td><span id="serviceText1_'+ table +'">'+ show +'</span></td>';
			return rowHtml;
		},
		show: function(table) {
			var interface = document.getElementById('serviceInterface_'+table).value;
			var extendsInterface = "ServiceInterface";
			var show = 'public interface ' + interface + ' extends ' + extendsInterface;
			jQuery('#serviceText_'+table).html(show);
			
			this.show1(table)
		},
		show1: function(table) {
			var implement = document.getElementById('serviceImplement_'+table).value;
			var interface = document.getElementById('serviceInterface_'+table).value;
			var extendsSupport = "ServiceSupport";
			var extendsInterface = "ServiceInterface";
			var show = 'public class ' + implement + ' extends ' + extendsSupport + ' implements ' + interface;
			jQuery('#serviceText1_'+table).html(show);
		}
	};

	jQuery('#config_entity_btn').click(function() {
		entity.config($(":checkbox[name=column]"),jQuery("#tableName").val());
	});
	jQuery('#config_mapper_btn').click(function() {
		mapper.config(jQuery("#tableName").val());
	});
//	jQuery('#config_manager_btn').click(function() {
//		manager.config(jQuery("#tableName").val());
//	});
	jQuery('#config_service_btn').click(function() {
		service.config(jQuery("#tableName").val());
	});
	
    var generate = function() {
	$('#generate_form').form('nqcxSubmit',{
		url: '#springUrl('')' + '/generate/doit',
		onSubmit: function(){
			return $(this).form('validate');
		},
			addDatas: {
				tableName: table.tableName().val(),
				wsPath: ws.wsPath().val(),
				pName: project.pName().val(),
				pType: project.pType().filter(':checked').val(),
				pPath: project.pPath().val(),
				pPackage: project.pPackage().val()
			},
		success: function(result){
			if (result.success){
				jQuery.messager.show({
					title: 'Success',
					msg: '保存成功'
				});
			} else {
				jQuery.messager.show({
					title: 'Error',
					msg: result.errorText
				});
			}
		}
	});
	};
	
	jQuery('#generate_btn').click(function() {
		generate();
	});
</script>